[{"title":"脆皮鲜奶","date":"2021-01-21T17:02:55.000Z","path":"2021/01/22/脆皮鲜奶/","text":"recited from 美食作家王刚R-&gt;“炸鲜奶”的家常做法 食材 石材 投喂方式-","content":"<h2 id=\"recited-from-美食作家王刚R-gt-“炸鲜奶”的家常做法\"><a href=\"#recited-from-美食作家王刚R-gt-“炸鲜奶”的家常做法\" class=\"headerlink\" title=\"recited from 美食作家王刚R-&gt;“炸鲜奶”的家常做法\"></a>recited from <a href=\"https://space.bilibili.com/290526283\">美食作家王刚R</a>-&gt;<a href=\"https://www.bilibili.com/video/BV1U7411E7LH\">“炸鲜奶”的家常做法</a></h2><a id=\"more\"></a>\n<h2 id=\"食材\"><a href=\"#食材\" class=\"headerlink\" title=\"食材\"></a>食材</h2><ul>\n<li><h2 id=\"石材\"><a href=\"#石材\" class=\"headerlink\" title=\"石材\"></a>石材</h2></li>\n<li></li>\n</ul>\n<h2 id=\"投喂方式\"><a href=\"#投喂方式\" class=\"headerlink\" title=\"投喂方式\"></a>投喂方式</h2><p>- </p>\n","categories":[{"name":"深夜食堂","slug":"深夜食堂","permalink":"http://example.com/categories/%E6%B7%B1%E5%A4%9C%E9%A3%9F%E5%A0%82/"}],"tags":[{"name":"甜点","slug":"甜点","permalink":"http://example.com/tags/%E7%94%9C%E7%82%B9/"},{"name":"王刚","slug":"王刚","permalink":"http://example.com/tags/%E7%8E%8B%E5%88%9A/"}]},{"title":"芝心厚蛋烧","date":"2021-01-21T16:58:32.000Z","path":"2021/01/22/芝心厚蛋烧/","text":"recited from 二喵的饭-&gt;一口一个 多汁爆浆的芝心厚蛋烧！！！ 这是双人份的量，一人食的话，请记得减半 食材 全蛋x3 牛奶70ml 芝士 就是力量 根据个人喜好掌握量就好 盐1/3勺 这是多大的勺？？？ 喜欢的酱料（番茄酱和沙拉酱 大概） 石材 当然还需要一口做玉子烧用的矩形锅，不粘锅最好了 投喂方式 三个全蛋和牛奶一起搅拌均匀，记得放盐 锅底薄涂一层油，开小火 倒入蛋液，刚好能铺满锅底即可，起泡的地方可以戳破 为玉子烧注入力量加入适量芝士 卷 重复步骤2-5，记得每次倒入蛋液后，掀开锅里原来的蛋卷，让蛋液浸满整锅 边边也可以烤一烤 定形，可以在锅里用铲子塑形，也可以趁热用寿司竹帘卷起来压一压 切块 选择对象并投喂","content":"<h2 id=\"recited-from-二喵的饭-gt-一口一个-多汁爆浆的芝心厚蛋烧！！！\"><a href=\"#recited-from-二喵的饭-gt-一口一个-多汁爆浆的芝心厚蛋烧！！！\" class=\"headerlink\" title=\"recited from 二喵的饭-&gt;一口一个 多汁爆浆的芝心厚蛋烧！！！\"></a>recited from <a href=\"https://space.bilibili.com/29329085\">二喵的饭</a>-&gt;<a href=\"https://www.bilibili.com/video/BV1Kx411f79F\">一口一个 多汁爆浆的芝心厚蛋烧！！！</a></h2><ul>\n<li>这是<strong>双人份</strong>的量，一人食的话，请记得减半<a id=\"more\"></a>\n</li>\n</ul>\n<hr>\n<h2 id=\"食材\"><a href=\"#食材\" class=\"headerlink\" title=\"食材\"></a>食材</h2><ul>\n<li>全蛋x3</li>\n<li>牛奶70ml</li>\n<li>芝士 <del>就是力量</del> 根据个人喜好掌握量就好</li>\n<li>盐1/3勺 <del>这是多大的勺？？？</del></li>\n<li>喜欢的酱料（番茄酱和沙拉酱 大概）</li>\n</ul>\n<h2 id=\"石材\"><a href=\"#石材\" class=\"headerlink\" title=\"石材\"></a><del>石材</del></h2><ul>\n<li>当然还需要一口做玉子烧用的矩形锅，不粘锅最好了</li>\n</ul>\n<hr>\n<h2 id=\"投喂方式\"><a href=\"#投喂方式\" class=\"headerlink\" title=\"投喂方式\"></a>投喂方式</h2><ol>\n<li>三个全蛋和牛奶一起搅拌均匀，记得放盐</li>\n<li>锅底薄涂一层油，开小火</li>\n<li>倒入蛋液，刚好能铺满锅底即可，起泡的地方可以戳破</li>\n<li>为玉子烧<del>注入力量</del>加入适量芝士</li>\n<li>卷</li>\n<li>重复步骤2-5，记得每次倒入蛋液后，掀开锅里原来的蛋卷，让蛋液浸满整锅</li>\n<li> 边边也可以烤一烤</li>\n<li>定形，可以在锅里用铲子塑形，也可以趁热用寿司竹帘卷起来压一压</li>\n<li>切块</li>\n<li><del>选择对象并投喂</del></li>\n</ol>\n","categories":[{"name":"深夜食堂","slug":"深夜食堂","permalink":"http://example.com/categories/%E6%B7%B1%E5%A4%9C%E9%A3%9F%E5%A0%82/"}],"tags":[{"name":"鸡蛋","slug":"鸡蛋","permalink":"http://example.com/tags/%E9%B8%A1%E8%9B%8B/"},{"name":"小食","slug":"小食","permalink":"http://example.com/tags/%E5%B0%8F%E9%A3%9F/"},{"name":"二喵的饭","slug":"二喵的饭","permalink":"http://example.com/tags/%E4%BA%8C%E5%96%B5%E7%9A%84%E9%A5%AD/"}]},{"title":"GitHub_pages+Windows10+hexo搭建个人博客","date":"2021-01-21T16:31:32.000Z","path":"2021/01/22/GitHubPages教程-Yilia主题部署和美化/","text":"写在前面：这是比较简单的环境搭建的过程，基本属于“无脑下一步”类型，好好按照下面写的就可以（在一天之内）完成属于自己的静态博客的嘴贱环境搭建过程啦~ 写在前面2：学生党…没有好好整理自己笔记本里面的文档啊、应用啊什么的习惯，而且一学期下来（被）上了各种不同的课，安装了一大堆应用，生成了一大堆不知道保存在哪的工程文件（其实是垃圾），所以大概重装系统的频率是一学期一次。然而有一些（配置过程比较麻烦）的应用又是必须的，每次清理系统之后都需要爬各种大神的帖子，在各种不同的安装方法之间比较，通常要翻3 4个贴才能配置好所需的环境（就比如这次的个人博客的搭建过程……）。所以这次，决定开个自己的小空间，记录一下配置过程中踩的各种坑~ 环境搭建 Hexo基于node.js，搭建过程中需要在git.bash中使用npm和git命令，因此需要先在本地安装Node.js和Git，下载链接如下：nodejs.org/zh-cngit-scm.com/downloadsgit_阿里云镜像直接选择页面上推荐的版本下载，一路安装就好，直至按照默认配置完成上面两个软件的安装。 新版本的node.js在安装时可选附加组件的安装 安装完成之后，按Win+R输入cmd或者在任务栏左下角”田牌图标“处右键，选择”power shell管理员“，在打开的cmd窗口或power shell窗口中依次输入： 123node -vnpm -vgit --version 连接Github 未注册过GitHub的新用户直接选择sign up，输入注册邮箱、用户密码、用户名即可获得免费账户x1（注意，注册邮箱需要在国内能直接登录，因为注册过程需要在邮箱中接收GitHub发送过来的验证码）； 已经注册过的用户，直接选择sign in登录就好。 随便在一个什么地方（推荐在C盘根目录下新建一个文件夹，以后这个文件夹就是创建和修改博客的地方，我自己的文件夹名称是”hexo-blogs“）单击右键 -&gt; 选择”Git Bash Here“，按照如下命令设置用户名和邮箱：12git config --global user.name &quot;注册时输入的GitHub用户名&quot;git config --global user.email &quot;注册时输入的邮箱&quot; 创建SSH密钥： 依旧是在Git Bash终端中输入：1ssh-keygen -t rsa -C &quot;注册时输入的邮箱&quot; 回车开始执行命令之后，终端会给出密钥的存储位置的提示，直接一路回车按照默认选择就好。添加密钥 从资源管理器进入“C:\\Users\\用户名.ssh”目录（这一步需要勾选资源管理器中的“显示隐藏项目”），右键单击“id_rsa.pub”选择用记事本打开，全选并复制里面的内容。 登录GitHub，单击右上角的用户头像，进入Settings页面（注意不是进入我们这个GitHub pages所在repo的settings页面），选择左边侧栏中的”SSH and GPG keys“，点击”New SSH key“。 title随便填一些能代表本次登录的主机的信息就好（如果你要在≥2台机器上部署你的博客的话，请记得把两台主机的信息填写清楚），将之前复制的”id_rsa.pub“粘贴之Key中，点击”Add SSH key“完成添加。验证连接 在Git Bash中输入：1ssh -T git@github.com 出现”Are you sure……“，输入yes之后，回车确认，等待程序执行。最后一行显示“*Hi xxx! You’ve successfully authenticated, but GitHub does not provide shell access.*”就代表连接成功。 创建GitHub Pages仓库 在GitHub的个人主页右上角选择“**+ -&gt; New repository**”: “Repository name”中输入 用户名.github.io 选定仓库的类型为Public 一定要勾选上“Initialize this repository with a README”，不勾选这一项的话，等到生成网页时可能会出现错误。如果出错的话，直接把这个仓库删掉，从头来过就好 全部填好后点击”Create repository”创建创建成功后默认启用HTTPS，那么我们的个人博客地址就是https://用户名.github.io 在本地安装Hexo程序 回到我们在第二步连接GitHub时建立的专门为本次博客准备的文件夹中，右键 -&gt; Git Bash Here。安装Hexo： 使用npm命令安装Hexo程序：1npm install -g hexo-cli 耐心地等待至安装完成就好，安装过程（根据网络连接的情况）真心比较缓慢…… Hexo的初始化和本地预览： 初始化并安装所需组件： 12hexo init #初始化hexonpm install #安装所需组件 上述两个命令执行完成之后，一次输入以下两个命令，启动本地服务器进行预览： 12hexo g #生成页面hexo s #启动预览 在浏览器中输入http://localhost:4000，出现hexo的默认页面，就代表了本地博客安装成功~ 上述命令执行完之后，我们的Hexo博客相关的文件夹的目录结构如下： 12345678_config.yml #网站的配置信息package.json #应用程序的信息scaffolds #模板文件夹source #存放用户构建的资源，新建立的Markdown文档 -&gt; _drafts(这个文件夹一般是没有的) -&gt; _poststhemes #存放主题的文件夹public #网站文件 部署Hexo到GitHub Pages 在本地博客测试成功之后，就需要上传到GitHub进行部署，使我们创建的页面（被GitHub编译之后）能够在网络上进行访问。 首先安装hexo-deployer-git：npm install hexo-deployer-git --save 然后修改_config.yml文件末尾的Deployment部分： 1234deploy: type: git repository: git@github.com:用户名/用户名.github.io.git branch: master 完成后在Git Bash中运行命令： 1hexo d #部署 将网站部署到GitHub Pages。 这时在浏览器中访问我们的GitHub域名https://用户名.github.io就可以看到我们部署的Hexo网站了。 绑定域名嘤嘤嘤 这一部分由于我还没有购买域名，并且近期暂时没有购买域名的打算，所以要等到我决定购买域名之后再更新~ 开始使用安装markdown编辑器 由于我们要发布在GitHub Pages上面的文章都属于静态博客，所以需要用markdown格式对文档进行编辑，没有一款用起来顺手的编辑器自然会对写作过程造成不小的阻碍，那么下面就是Typora这款编辑器的安装过程~（先推荐一个markdown新手写作指南） Typora的官网（想打开的快一点的话，可能需要*梯子*）：Typora 不想从官网跳转到下载页面的话，下面是下载链接：WindowsOS X BetaLinux_terminal 发布文章 从资源管理器进入我们为博客专门准备的文件夹hexo-blogs，右键选择“Git Bash Here”，开始创建我们的第一篇博客：1hexo new &quot;这是一个测试——我的第一篇博客&quot; 之后，在hexo-blogs/source文件夹中会出现一个“这是一个测试——我的第一篇博客.md”文件，使用markdown编辑器打开该文件就可以开始创作了。 每次对 *.md文件进行编辑之后，如确定无误，可用如下两条命令将文章渲染并部署在GitHub Pages上发布：如果使用Typora这个编辑器的话，可以点击左下角时时预览写好的文档的效果12hexo g #生成页面hexo d #部署发布 至此，最简化的GitHub Pages配置已经完成了 剩余的小折腾（其实也是比较费心思的折腾）在我参考的几篇博文中已经写的很清楚了（没错，这篇是参考了两三片帖子的查重率70%左右的博文），下面是参考的原文链接：使用 Hexo+GitHub 搭建个人免费博客教程（小白向）Hexo+GithubPages&amp;CodingPages搭建自己的个人博客 最后是我自己的小破站 /w_w小破站 解决GitHub-clone速度慢的问题 第一步：直接把网址对应的IP放进hosts文件，这样就省去了DNS解析的时间， 步骤如下： 1、查找域名对应的ip地址，并修改hosts文件 nslookup github.global.ssl.fastly.Net nslookup github.com 在这里插入图片描述 将下列内容加入 /etc/hosts文件中 151.101.76.249 http://global-ssl.fastly.net 192.30.255.113 http://github.com #此处112还是113根据自己的情况调整？ 2、刷新DNS缓存 linux： sudo /etc/init.d/networking restart windows：ipconfig /flushdns mac：sudo killall -HUP mDNSResponder 第二步：https://www.jianshu.com/p/fe5612c1bdd0 克隆时只拷贝最后一次commit： git clone –depth=1 https://……","content":"<ul>\n<li>写在前面：<br>这是比较简单的环境搭建的过程，基本属于“无脑下一步”类型，好好按照下面写的就可以（在一天之内）完成属于自己的静态博客的嘴贱环境搭建过程啦~<a id=\"more\"></a></li>\n<li>写在前面2：<br>学生党…没有好好整理自己笔记本里面的文档啊、应用啊什么的习惯，而且一学期下来（被）上了各种不同的课，安装了一大堆应用，生成了一大堆不知道保存在哪的工程文件（其实是垃圾），所以大概重装系统的频率是一学期一次。然而有一些（配置过程比较麻烦）的应用又是必须的，每次清理系统之后都需要爬各种大神的帖子，在各种不同的安装方法之间比较，通常要翻3 4个贴才能配置好所需的环境（就比如这次的个人博客的搭建过程……）。所以这次，决定开个自己的小空间，记录一下配置过程中踩的各种坑~</li>\n</ul>\n<h1 id=\"环境搭建\"><a href=\"#环境搭建\" class=\"headerlink\" title=\"环境搭建\"></a>环境搭建</h1><ul>\n<li>Hexo基于node.js，搭建过程中需要在git.bash中使用npm和git命令，因此需要先在本地安装Node.js和Git，下载链接如下：<br><a href=\"nodejs.org/zh-cn\">nodejs.org/zh-cn</a><br><a href=\"git-scm.com/downloads\">git-scm.com/downloads</a><br><a href=\"https://npm.taobao.org/mirrors/git-for-windows/\">git_阿里云镜像</a><br>直接选择页面上推荐的版本下载，一路安装就好，直至按照默认配置完成上面两个软件的安装。</li>\n<li>新版本的node.js在安装时可选<a href=\"https://github.com/nodejs/node-gyp#on-windows\">附加组件的安装</a></li>\n<li>安装完成之后，按Win+R输入cmd或者在任务栏左下角”田牌图标“处右键，选择”power shell管理员“，在打开的cmd窗口或power shell窗口中依次输入：</li>\n</ul>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">node</span> <span class=\"title\">-v</span></span><br><span class=\"line\">npm -v</span><br><span class=\"line\">git --<span class=\"keyword\">version</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"连接Github\"><a href=\"#连接Github\" class=\"headerlink\" title=\"连接Github\"></a>连接Github</h1><ul>\n<li>未注册过GitHub的新用户直接选择sign up，输入注册邮箱、用户密码、用户名即可获得免费账户x1（注意，注册邮箱需要在国内能直接登录，因为注册过程需要在邮箱中接收GitHub发送过来的验证码）；</li>\n<li>已经注册过的用户，直接选择sign in登录就好。</li>\n<li>随便在一个什么地方（推荐在C盘根目录下新建一个文件夹，以后这个文件夹就是创建和修改博客的地方，我自己的文件夹名称是”hexo-blogs“）单击右键 -&gt; 选择”Git Bash Here“，按照如下命令<strong>设置用户名和邮箱</strong>：<figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"keyword\">config</span> --<span class=\"keyword\">global</span> user<span class=\"variable\">.name</span> <span class=\"string\">&quot;注册时输入的GitHub用户名&quot;</span></span><br><span class=\"line\">git <span class=\"keyword\">config</span> --<span class=\"keyword\">global</span> user<span class=\"variable\">.email</span> <span class=\"string\">&quot;注册时输入的邮箱&quot;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"创建SSH密钥：\"><a href=\"#创建SSH密钥：\" class=\"headerlink\" title=\"创建SSH密钥：\"></a>创建SSH密钥：</h2></li>\n<li>依旧是在Git Bash终端中输入：<figure class=\"highlight excel\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -<span class=\"built_in\">t</span> rsa -C <span class=\"string\">&quot;注册时输入的邮箱&quot;</span></span><br></pre></td></tr></table></figure>\n回车开始执行命令之后，终端会给出密钥的存储位置的提示，直接一路回车按照默认选择就好。<h2 id=\"添加密钥\"><a href=\"#添加密钥\" class=\"headerlink\" title=\"添加密钥\"></a>添加密钥</h2></li>\n<li>从资源管理器进入“C:\\Users\\用户名.ssh”目录（这一步需要勾选资源管理器中的“显示隐藏项目”），右键单击“id_rsa.pub”选择用记事本打开，全选并复制里面的内容。</li>\n<li>登录GitHub，单击右上角的用户头像，进入Settings页面（注意不是进入我们这个GitHub pages所在repo的settings页面），选择左边侧栏中的”SSH and GPG keys“，点击”New SSH key“。</li>\n<li>title随便填一些能代表本次登录的主机的信息就好（如果你要在≥2台机器上部署你的博客的话，请记得把两台主机的信息填写清楚），将之前复制的”id_rsa.pub“粘贴之Key中，点击”Add SSH key“完成添加。<h2 id=\"验证连接\"><a href=\"#验证连接\" class=\"headerlink\" title=\"验证连接\"></a>验证连接</h2></li>\n<li>在Git Bash中输入：<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -T <span class=\"symbol\">git@</span>github.com</span><br></pre></td></tr></table></figure>\n出现”<em>Are you sure……</em>“，输入yes之后，回车确认，等待程序执行。<br>最后一行显示“*Hi xxx! You’ve successfully authenticated, but GitHub does not provide shell access.*”就代表连接成功。</li>\n</ul>\n<h1 id=\"创建GitHub-Pages仓库\"><a href=\"#创建GitHub-Pages仓库\" class=\"headerlink\" title=\"创建GitHub Pages仓库\"></a>创建GitHub Pages仓库</h1><ul>\n<li>在GitHub的个人主页右上角选择“**+ -&gt; New repository**”:</li>\n</ul>\n<ol>\n<li>“Repository name”中输入 <code>用户名.github.io</code></li>\n<li>选定仓库的类型为Public</li>\n<li><strong>一定要勾选</strong>上“Initialize this repository with a README”，不勾选这一项的话，等到生成网页时可能会出现错误。<em>如果出错的话，直接把这个仓库删掉，从头来过就好</em></li>\n<li>全部填好后点击”Create repository”创建<br>创建成功后默认启用HTTPS，那么我们的个人博客地址就是<code>https://用户名.github.io</code></li>\n</ol>\n<h1 id=\"在本地安装Hexo程序\"><a href=\"#在本地安装Hexo程序\" class=\"headerlink\" title=\"在本地安装Hexo程序\"></a>在本地安装Hexo程序</h1><ul>\n<li>回到我们在第二步<strong>连接GitHub</strong>时建立的专门为本次博客准备的文件夹中，右键 -&gt; Git Bash Here。<h2 id=\"安装Hexo：\"><a href=\"#安装Hexo：\" class=\"headerlink\" title=\"安装Hexo：\"></a>安装Hexo：</h2></li>\n<li>使用npm命令安装Hexo程序：<figure class=\"highlight avrasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g hexo-<span class=\"keyword\">cli</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<p><strong>耐心地等待</strong>至安装完成就好，安装过程（根据网络连接的情况）真心比较缓慢……</p>\n<h2 id=\"Hexo的初始化和本地预览：\"><a href=\"#Hexo的初始化和本地预览：\" class=\"headerlink\" title=\"Hexo的初始化和本地预览：\"></a>Hexo的初始化和本地预览：</h2><ul>\n<li><p>初始化并安装所需组件：</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init    <span class=\"comment\">#初始化hexo</span></span><br><span class=\"line\">npm <span class=\"keyword\">install</span>  <span class=\"comment\">#安装所需组件</span></span><br></pre></td></tr></table></figure></li>\n<li><p>上述两个命令执行完成之后，一次输入以下两个命令，启动本地服务器进行预览：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">hexo</span> g    <span class=\"comment\">#生成页面</span></span><br><span class=\"line\">hexo s    <span class=\"comment\">#启动预览</span></span><br></pre></td></tr></table></figure>\n<p>在浏览器中输入<code>http://localhost:4000</code>，出现hexo的默认页面，就代表了本地博客安装成功~</p>\n</li>\n<li><p>上述命令执行完之后，我们的Hexo博客相关的文件夹的目录结构如下：</p>\n<figure class=\"highlight livescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_config.yml    <span class=\"comment\">#网站的配置信息</span></span><br><span class=\"line\">package.json   <span class=\"comment\">#应用程序的信息</span></span><br><span class=\"line\">scaffolds      <span class=\"comment\">#模板文件夹</span></span><br><span class=\"line\">source         <span class=\"comment\">#存放用户构建的资源，新建立的Markdown文档</span></span><br><span class=\"line\">   -&gt; _drafts(这个文件夹一般是没有的)</span><br><span class=\"line\">   -&gt; _posts</span><br><span class=\"line\">themes         <span class=\"comment\">#存放主题的文件夹</span></span><br><span class=\"line\">public         <span class=\"comment\">#网站文件</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"部署Hexo到GitHub-Pages\"><a href=\"#部署Hexo到GitHub-Pages\" class=\"headerlink\" title=\"部署Hexo到GitHub Pages\"></a>部署Hexo到GitHub Pages</h1></li>\n<li><p>在本地博客测试成功之后，就需要上传到GitHub进行部署，使我们创建的页面（被GitHub编译之后）能够在网络上进行访问。</p>\n</li>\n<li><p>首先安装hexo-deployer-git：<code>npm install hexo-deployer-git --save</code></p>\n</li>\n<li><p>然后修改<strong>_config.yml</strong>文件末尾的Deployment部分：</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">deploy</span>:</span><br><span class=\"line\">\t<span class=\"attribute\">type</span>: git</span><br><span class=\"line\">\t<span class=\"attribute\">repository</span>: git<span class=\"variable\">@github</span>.<span class=\"attribute\">com</span>:用户名/用户名.github.io.git</span><br><span class=\"line\">\t<span class=\"attribute\">branch</span>: master</span><br></pre></td></tr></table></figure></li>\n<li><p>完成后在Git Bash中运行命令：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">hexo</span> d    <span class=\"comment\">#部署</span></span><br></pre></td></tr></table></figure>\n<p>将网站部署到GitHub Pages。</p>\n</li>\n<li><p>这时在浏览器中访问我们的GitHub域名<code>https://用户名.github.io</code>就可以看到我们部署的Hexo网站了。</p>\n</li>\n</ul>\n<h1 id=\"绑定域名\"><a href=\"#绑定域名\" class=\"headerlink\" title=\"绑定域名\"></a>绑定域名</h1><p>嘤嘤嘤 这一部分由于我还没有购买域名，并且近期暂时没有购买域名的打算，所以要等到我决定购买域名之后再更新~</p>\n<h1 id=\"开始使用\"><a href=\"#开始使用\" class=\"headerlink\" title=\"开始使用\"></a>开始使用</h1><h2 id=\"安装markdown编辑器\"><a href=\"#安装markdown编辑器\" class=\"headerlink\" title=\"安装markdown编辑器\"></a>安装markdown编辑器</h2><ul>\n<li>由于我们要发布在GitHub Pages上面的文章都属于静态博客，所以需要用markdown格式对文档进行编辑，没有一款用起来顺手的编辑器自然会对写作过程造成不小的阻碍，那么下面就是<code>Typora</code>这款编辑器的安装过程~<br>（先推荐一个<a href=\"https://www.jianshu.com/p/q81RER\">markdown新手写作指南</a>）</li>\n<li>Typora的官网（想打开的快一点的话，可能需要*<a href=\"https://www.vultrblog.com/bandwagonhost-with-vultr/.html\">梯子</a>*）：<a href=\"https://www.typora.io/\">Typora</a> </li>\n<li>不想从官网跳转到下载页面的话，下面是下载链接：<br><a href=\"https://www.typora.io/#windows\">Windows</a><br><a href=\"https://www.typora.io/download/Typora.dmg\">OS X Beta</a><br><a href=\"https://www.typora.io/#linux\">Linux_terminal</a></li>\n</ul>\n<h2 id=\"发布文章\"><a href=\"#发布文章\" class=\"headerlink\" title=\"发布文章\"></a>发布文章</h2><ul>\n<li>从资源管理器进入我们为博客专门准备的文件夹<strong>hexo-blogs</strong>，右键选择“Git Bash Here”，开始创建我们的第一篇博客：<figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo <span class=\"keyword\">new</span> <span class=\"string\">&quot;这是一个测试——我的第一篇博客&quot;</span></span><br></pre></td></tr></table></figure></li>\n<li>之后，在hexo-blogs/source文件夹中会出现一个“这是一个测试——我的第一篇博客.md”文件，使用markdown编辑器打开该文件就可以开始创作了。</li>\n<li>每次对 *.md文件进行编辑之后，如确定无误，可用如下两条命令将文章渲染并部署在GitHub Pages上发布：<code>如果使用Typora这个编辑器的话，可以点击左下角时时预览写好的文档的效果</code><figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">hexo</span> g    <span class=\"comment\">#生成页面</span></span><br><span class=\"line\">hexo d    <span class=\"comment\">#部署发布</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"至此，最简化的GitHub-Pages配置已经完成了\"><a href=\"#至此，最简化的GitHub-Pages配置已经完成了\" class=\"headerlink\" title=\"至此，最简化的GitHub Pages配置已经完成了\"></a>至此，最简化的GitHub Pages配置已经完成了</h1></li>\n<li>剩余的小折腾（其实也是比较费心思的折腾）在我参考的几篇博文中已经写的很清楚了（没错，这篇是参考了两三片帖子的查重率70%左右的博文），下面是参考的原文链接：<br><a href=\"https://zhuanlan.zhihu.com/p/60578464\">使用 Hexo+GitHub 搭建个人免费博客教程（小白向）</a><br><a href=\"https://zhuanlan.zhihu.com/p/28380320\">Hexo+GithubPages&amp;CodingPages搭建自己的个人博客</a></li>\n<li>最后是我自己的小破站  /w_w<br><a href=\"https://peter-li-0021.github.io/\">小破站</a></li>\n</ul>\n<h1 id=\"解决GitHub-clone速度慢的问题\"><a href=\"#解决GitHub-clone速度慢的问题\" class=\"headerlink\" title=\"解决GitHub-clone速度慢的问题\"></a>解决GitHub-clone速度慢的问题</h1><ul>\n<li><p>第一步：直接把网址对应的IP放进hosts文件，这样就省去了DNS解析的时间，<br>  步骤如下：<br>  1、查找域名对应的ip地址，并修改hosts文件<br>  nslookup github.global.ssl.fastly.Net<br>  nslookup github.com </p>\n<p>  在这里插入图片描述<br>  将下列内容加入 /etc/hosts文件中<br>  151.101.76.249 <a href=\"http://global-ssl.fastly.net/\">http://global-ssl.fastly.net</a><br>  192.30.255.113 <a href=\"http://github.com/\">http://github.com</a>  #此处112还是113根据自己的情况调整？<br>  2、刷新DNS缓存<br>  linux：    sudo /etc/init.d/networking restart<br>  windows：ipconfig /flushdns<br>  mac：sudo killall -HUP mDNSResponder</p>\n</li>\n<li><p>第二步：<a href=\"https://www.jianshu.com/p/fe5612c1bdd0\">https://www.jianshu.com/p/fe5612c1bdd0</a><br>  克隆时只拷贝最后一次commit：<br>  git clone –depth=1 https://……</p>\n</li>\n</ul>\n","categories":[{"name":"教程","slug":"教程","permalink":"http://example.com/categories/%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"GitHubPages","slug":"GitHubPages","permalink":"http://example.com/tags/GitHubPages/"},{"name":"Yilia","slug":"Yilia","permalink":"http://example.com/tags/Yilia/"}]}]